diff --git a/cmake/defaults/Packages.cmake b/cmake/defaults/Packages.cmake
index 825c5af1f..73387b57a 100644
--- a/cmake/defaults/Packages.cmake
+++ b/cmake/defaults/Packages.cmake
@@ -129,7 +129,7 @@ if(PXR_BUILD_USD_TOOLS OR PXR_BUILD_TESTS)
 endif()
 
 # --TBB
-find_package(TBB REQUIRED COMPONENTS tbb)
+find_package(TBB)
 add_definitions(${TBB_DEFINITIONS})
 
 # --math
diff --git a/cmake/defaults/msvcdefaults.cmake b/cmake/defaults/msvcdefaults.cmake
index fd41f7aae..6fb2e9cb4 100644
--- a/cmake/defaults/msvcdefaults.cmake
+++ b/cmake/defaults/msvcdefaults.cmake
@@ -120,9 +120,6 @@ _add_define("WIN32_LEAN_AND_MEAN")
 # for all translation units.
 set(_PXR_CXX_FLAGS "${_PXR_CXX_FLAGS} /bigobj")
 
-# Enable PDB generation.
-set(_PXR_CXX_FLAGS "${_PXR_CXX_FLAGS} /Zi")
-
 # Enable multiprocessor builds.
 set(_PXR_CXX_FLAGS "${_PXR_CXX_FLAGS} /MP")
 set(_PXR_CXX_FLAGS "${_PXR_CXX_FLAGS} /Gm-")
diff --git a/cmake/macros/Private.cmake b/cmake/macros/Private.cmake
index 7ac3b3c06..4cd6174d0 100644
--- a/cmake/macros/Private.cmake
+++ b/cmake/macros/Private.cmake
@@ -919,11 +919,13 @@ function(_pxr_python_module NAME)
         return()
     endif()
 
-    if (WIN32 AND PXR_USE_DEBUG_PYTHON)
+    if (WIN32 AND PXR_USE_DEBUG_PYTHON AND NOT CMAKE_DEBUG_POSTFIX)
         # On Windows when compiling with debug python the library must be named with _d.
-        set(LIBRARY_NAME "_${NAME}_d")
-    else()
-        set(LIBRARY_NAME "_${NAME}")
+        # Blender: but this can be skipped if CMAKE_DEBUG_POSTFIX is set, it knows
+        # what it is doing and we don't want libraries ending in _d_d.pyd
+         set(LIBRARY_NAME "_${NAME}_d")
+     else()
+         set(LIBRARY_NAME "_${NAME}")
     endif()
 
     # Install .py files.
diff --git a/pxr/base/arch/timing.h b/pxr/base/arch/timing.h
index d78598a84..289ec08d2 100644
--- a/pxr/base/arch/timing.h
+++ b/pxr/base/arch/timing.h
@@ -84,6 +84,10 @@ ArchGetTickTime()
 inline uint64_t
 ArchGetStartTickTime()
 {
+    // BLENDER: avoid using rdtsc instruction that is not supported on older CPUs.
+    return ArchGetTickTime();
+
+#if 0
     uint64_t t;
 #if defined (ARCH_OS_DARWIN)
     return ArchGetTickTime();
@@ -116,6 +120,7 @@ ArchGetStartTickTime()
 #error "Unsupported architecture."
 #endif
   return t;
+#endif
 }
 
 /// Get a "stop" tick time for measuring an interval of time.  See
@@ -125,6 +130,10 @@ ArchGetStartTickTime()
 inline uint64_t
 ArchGetStopTickTime()
 {
+    // BLENDER: avoid using rdtsc instruction that is not supported on older CPUs.
+    return ArchGetTickTime();
+
+#if 0
     uint64_t t;
 #if defined (ARCH_OS_DARWIN)
     return ArchGetTickTime();
@@ -155,11 +164,11 @@ ArchGetStopTickTime()
 #error "Unsupported architecture."
 #endif
   return t;
+#endif
 }
 
-#if defined (doxygen) ||                                                       \
-    (!defined(ARCH_OS_DARWIN) && defined(ARCH_CPU_INTEL) &&                    \
-     (defined(ARCH_COMPILER_CLANG) || defined(ARCH_COMPILER_GCC)))
+// BLENDER: avoid using rdtsc instruction that is not supported on older CPUs.
+#if 0
 
 /// A simple timer class for measuring an interval of time using the
 /// ArchTickTimer facilities.
diff --git a/pxr/imaging/hioOpenVDB/CMakeLists.txt b/pxr/imaging/hioOpenVDB/CMakeLists.txt
index e32762cea..d2c08d3da 100644
--- a/pxr/imaging/hioOpenVDB/CMakeLists.txt
+++ b/pxr/imaging/hioOpenVDB/CMakeLists.txt
@@ -20,6 +20,12 @@ else()
     LIST(APPEND __VDB_IMATH_LIBS ${OPENEXR_Half_LIBRARY})
 endif()
 
+if (WIN32)
+    # OpenVDB uses constants from <cmath> that aren't available on
+    # Windows unless this is defined.
+    add_definitions(-D_USE_MATH_DEFINES)
+endif()
+
 pxr_library(hioOpenVDB
     LIBRARIES
         ar
diff --git a/pxr/usd/usdMtlx/reader.cpp b/pxr/usd/usdMtlx/reader.cpp
index 29e901816..e6fc68b20 100644
--- a/pxr/usd/usdMtlx/reader.cpp
+++ b/pxr/usd/usdMtlx/reader.cpp
@@ -797,6 +797,15 @@ _NodeGraphBuilder::_CreateInterfaceInputs(
     // We deliberately ignore tokens here.
 }
 
+mx::StringSet _GetStdlibIncludes() {
+    mx::StringSet stdlibIncludes = UsdMtlxGetDocument("")->getReferencedSourceUris();
+    mx::StringSet normStdlibIncludes;
+    for (std::string const& entry : stdlibIncludes) {
+        normStdlibIncludes.insert(TfNormPath(entry));
+    }
+    return normStdlibIncludes;
+}
+
 // Returns True if the mtlxNodeDef corresponds to a locally defined custom node
 // with an associated nodegraph.
 // XXX Locally defined custom nodes without nodegraphs are not supported
@@ -818,13 +827,14 @@ _NodeGraphBuilder::_IsLocalCustomNode(const mx::ConstNodeDefPtr &mtlxNodeDef)
         }
         // Combine with the nodeDef relative path
         nodeDefUri = TfNormPath(fullMtlxPath + nodeDefUri);
+    } else {
+        nodeDefUri = TfNormPath(nodeDefUri);
     }
     
     // This is a locally defined custom node if the absolute path to the
     // nodedef is not included in the stdlibDoc.
     static mx::StringSet customNodeDefNames;
-    static const mx::StringSet stdlibIncludes =
-        UsdMtlxGetDocument("")->getReferencedSourceUris();
+    static const mx::StringSet stdlibIncludes = _GetStdlibIncludes();
     if (stdlibIncludes.find(nodeDefUri) == stdlibIncludes.end()) {
         // Check if we already used this custom node
         if (std::find(customNodeDefNames.begin(), customNodeDefNames.end(),
diff --git a/pxr/usdImaging/CMakeLists.txt b/pxr/usdImaging/CMakeLists.txt
index d35c59df0..dbf40cc68 100644
--- a/pxr/usdImaging/CMakeLists.txt
+++ b/pxr/usdImaging/CMakeLists.txt
@@ -7,7 +7,7 @@ set(DIRS
     usdVolImaging
     usdAppUtils
     usdviewq
-    bin
+    #bin
     plugin
 )
 
